services:
  backend:
    build: ./backend
    network_mode: "host"
    ports:
      - "8000:8000"
      - "9000:9000"
    environment:
      # AI providers
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - AI_API_TIMEOUT=${AI_API_TIMEOUT}
      - AI_API_MAX_RETRIES=${AI_API_MAX_RETRIES}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS}
      # tank information
      - TANK_LOCATION=${TANK_LOCATION}
      - TANK_TIMEZONE=${TANK_TIMEZONE}
      - TANK_TEMP_MIN=${TANK_TEMP_MIN}
      - TANK_TEMP_MAX=${TANK_TEMP_MAX}
      # app settings, data directories
      - DATA_DIR=${DATA_DIR}
      - IMAGES_DIR=${IMAGES_DIR}
      - DATABASE_DIR=${DATABASE_DIR}
      - DATABASE_URL=${DATABASE_URL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_MAX_AGE=${CORS_MAX_AGE}
      # camera devices
      - CAMERA_DEVICES=${CAMERA_DEVICES}
      - CAMERA_FPS=${CAMERA_FPS}
      - CAMERA_FRAME_BUFFER=${CAMERA_FRAME_BUFFER}
      - CAMERA_IMG_TYPE=${CAMERA_IMG_TYPE}
      - CAMERA_MAX_DIM=${CAMERA_MAX_DIM}
      - CAMERA_CAM_WIDTH=${CAMERA_CAM_WIDTH}
      - CAMERA_CAM_HEIGHT=${CAMERA_CAM_HEIGHT}
      - CAMERA_MAX_IMAGES=${CAMERA_MAX_IMAGES}
      - CAMERA_MIN_FREE_SPACE_MB=${CAMERA_MIN_FREE_SPACE_MB}
      - CAPTURE_ENABLED=${CAPTURE_ENABLED}
      - CAPTURE_INTERVAL=${CAPTURE_INTERVAL}
      - CAMERA_DEVICE_READ_ATTEMPTS=${CAMERA_DEVICE_READ_ATTEMPTS}
      - CAMERA_DEVICE_RETRY_DELAY=${CAMERA_DEVICE_RETRY_DELAY}
      - CAMERA_STREAM_TOGGLE_DELAY=${CAMERA_STREAM_TOGGLE_DELAY}
      # robot settings
      - ROBOT_SERVER_HOST=${ROBOT_SERVER_HOST}
      - ROBOT_SERVER_PORT=${ROBOT_SERVER_PORT}
    volumes:
      - ./data:/app/data:rw
      - /dev:/dev:rw
    devices:
      - "/dev/video0:/dev/video0"
      - "/dev/video1:/dev/video1"
      - "/dev/video2:/dev/video2"
      - "/dev/video3:/dev/video3"
      - "/dev/video4:/dev/video4"
      - "/dev/video5:/dev/video5"
    group_add:
      - video
    privileged: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    user: "${USER_ID}:${GROUP_ID}"

  frontend-pc:
    build: 
      context: ./frontend-pc
      args:
        - BACKEND_URL=http://localhost:8000
        - IMAGE_FETCH_INTERVAL=${IMAGE_FETCH_INTERVAL:-30000}
    network_mode: "host"
    environment:
      - BACKEND_URL=http://localhost:8000
      - HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-vr:
    build: ./frontend-vr
    network_mode: "host"
    environment:
      - BACKEND_URL=http://localhost:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  data:
    driver: local

networks:
  default:
    name: aquarius-network
  host:
    external: true